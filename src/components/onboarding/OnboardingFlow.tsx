import { AlertCircle, CheckCircle, SkipForward } from 'lucide-react';
import { useCallback, useState } from 'react';
import { Alert } from '@/components/ui/Alert';
import { Badge } from '@/components/ui/Badge';
import { Button } from '@/components/ui/Button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/Card';
import { Progress } from '@/components/ui/Progress';
import { useOnboarding, useOnboardingProgress } from '@/store/onboarding/hooks';
import { OrganizationNameGenerator } from '@/store/onboarding/organizationGenerator';
import { loggers } from '@/utils';
import { OrganizationSetup } from './OrganizationSetup';

/**
 * Centralized OnboardingFlow component demonstrating the new state machine hooks
 *
 * This component serves as both a working example and reference implementation
 * showing how to use the new hooks from src/store/onboarding/hooks.ts
 */
export function OnboardingFlow() {
  const {
    stateChecks,
    context,
    progress,
    actions,
    capabilities,
    currentRoute,
  } = useOnboarding();

  const progressDetails = useOnboardingProgress();

  // Local state for generated organization names and loading states
  const [generatedName, setGeneratedName] = useState<string>(
    context.suggestedOrganizationName ?? 'My Workspace'
  );
  const [isGeneratingName, setIsGeneratingName] = useState(false);
  const [isAutoGenerated, setIsAutoGenerated] = useState(true);

  // Handler for regenerating organization name
  const handleRegenerateName = useCallback(() => {
    setIsGeneratingName(true);

    // Simulate async name generation with a small delay for better UX
    setTimeout(() => {
      // Use a placeholder email to generate creative names
      const email = 'user@workspace.com';
      const suggestions = OrganizationNameGenerator.generateSuggestions(email);

      if (suggestions.length > 0) {
        // Filter to get creative suggestions (not default ones)
        const creativeSuggestions = suggestions.filter(
          (s) => s.source !== 'email-domain' && s.confidence !== 'high'
        );

        const pool =
          creativeSuggestions.length > 0 ? creativeSuggestions : suggestions;

        // Pick a random suggestion from the pool
        const randomIndex = Math.floor(Math.random() * pool.length);
        const newName = pool[randomIndex]?.name ?? 'My Workspace';
        setGeneratedName(newName);
        setIsAutoGenerated(true);
        loggers.onboarding.info('Organization name regenerated', {
          newName,
          suggestionsCount: suggestions.length,
        });
      }

      setIsGeneratingName(false);
    }, 500); // Small delay for better UX
  }, []);

  // Organization submit handler for INITIAL_SETUP state
  const handleOrganizationSubmit = useCallback(
    (name: string, usageType: 'solo' | 'team') => {
      // Log the usage type for future customization
      loggers.onboarding.info('Organization setup submitted', {
        name,
        usageType,
        suggestedName: context.suggestedOrganizationName,
      });

      // Call the createOrganization action
      void actions.createOrganization(name);
    },
    [actions, context.suggestedOrganizationName]
  );

  // Error state handling
  if (stateChecks.isError) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-destructive">
              <AlertCircle className="h-5 w-5" />
              Onboarding Error
            </CardTitle>
            <CardDescription>
              Something went wrong during the onboarding process.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {context.errors.length > 0 && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <div>
                  <p className="font-semibold">Latest Error:</p>
                  <p>
                    {context.errors[context.errors.length - 1]?.message ??
                      'Unknown error'}
                  </p>
                </div>
              </Alert>
            )}
            <div className="flex justify-between">
              <Button variant="outline" onClick={actions.reset}>
                Start Over
              </Button>
              <Button onClick={actions.retry}>Try Again</Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Completion state
  if (stateChecks.isDashboard || stateChecks.isComplete) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-green-600">
              <CheckCircle className="h-5 w-5" />
              Onboarding Complete!
            </CardTitle>
            <CardDescription>
              Welcome to RocketHooks! You&apos;re all set up and ready to go.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="text-sm text-muted-foreground">
              <p>
                <strong>User:</strong> {context.userId}
              </p>
              {context.organizationId && (
                <p>
                  <strong>Organization:</strong> {context.organizationId}
                </p>
              )}
              <p>
                <strong>Completed Steps:</strong>{' '}
                {context.completedTourSteps.size}
              </p>
              {context.completedAt && (
                <p>
                  <strong>Completed:</strong>{' '}
                  {new Date(context.completedAt).toLocaleString()}
                </p>
              )}
            </div>
            <Button className="w-full">Go to Dashboard</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header with Progress */}
      <header className="sticky top-0 z-50 border-b bg-background/95 backdrop-blur">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div>
                <h1 className="text-lg font-semibold">
                  {getStepTitle(stateChecks)}
                </h1>
                <p className="text-sm text-muted-foreground">
                  Step {progress.currentStep} of {progress.totalSteps}
                </p>
              </div>
            </div>
            <Badge variant="secondary">{progress.percentage}% complete</Badge>
          </div>
          <div className="mt-4">
            <Progress value={progress.percentage} className="h-2" />
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-8">
        <div className="max-w-2xl mx-auto">
          {/* Initial Setup State */}
          {stateChecks.isInitialSetup && (
            <Card>
              <CardHeader>
                <CardTitle>Let&apos;s set up your workspace</CardTitle>
                <CardDescription>
                  We&apos;ve suggested a name for your organization, but feel
                  free to customize it to fit your needs.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <OrganizationSetup
                  defaultName={generatedName}
                  onSubmit={handleOrganizationSubmit}
                  onRegenerateName={handleRegenerateName}
                  isLoading={context.isCreatingOrganization}
                  isGeneratingName={isGeneratingName}
                  isAutoGenerated={isAutoGenerated}
                  {...(context.organizationCreationError && {
                    error: context.organizationCreationError,
                  })}
                />

                {capabilities.canSkip && (
                  <div className="flex justify-start">
                    <Button variant="ghost" onClick={actions.skipOrganization}>
                      <SkipForward className="h-4 w-4 mr-2" />
                      Skip for now
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          )}

          {/* Debug Information (Development) */}
          {process.env.NODE_ENV === 'development' && (
            <Card className="mt-8">
              <CardHeader>
                <CardTitle className="text-sm">Debug Information</CardTitle>
              </CardHeader>
              <CardContent className="text-xs space-y-2">
                <div>
                  <strong>Current Route:</strong> {currentRoute}
                </div>
                <div>
                  <strong>User ID:</strong> {context.userId}
                </div>
                <div>
                  <strong>Organization ID:</strong>{' '}
                  {context.organizationId ?? 'Not set'}
                </div>
                <div>
                  <strong>Started At:</strong>{' '}
                  {context.startedAt ?? 'Not started'}
                </div>
                <div>
                  <strong>Can Proceed:</strong>{' '}
                  {capabilities.canProceed ? 'Yes' : 'No'}
                </div>
                <div>
                  <strong>Is First Step:</strong>{' '}
                  {progressDetails.isFirstStep ? 'Yes' : 'No'}
                </div>
                <div>
                  <strong>Is Last Step:</strong>{' '}
                  {progressDetails.isLastStep ? 'Yes' : 'No'}
                </div>
                <div>
                  <strong>Capabilities:</strong>
                </div>
                <ul className="list-disc list-inside ml-4">
                  <li>Can go back: {capabilities.canGoBack ? 'Yes' : 'No'}</li>
                  <li>Can skip: {capabilities.canSkip ? 'Yes' : 'No'}</li>
                  <li>Can proceed: {capabilities.canProceed ? 'Yes' : 'No'}</li>
                </ul>
                {context.errors.length > 0 && (
                  <div>
                    <strong>Errors:</strong>
                    <ul className="list-disc list-inside ml-4">
                      {context.errors.map((error) => (
                        <li key={`${error.timestamp}-${error.code}`}>
                          {error.timestamp}: {error.message} (Code: {error.code}
                          )
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      </main>
    </div>
  );
}

/**
 * Helper function to get step title based on current state
 */
function getStepTitle(
  stateChecks: ReturnType<typeof useOnboarding>['stateChecks']
) {
  if (stateChecks.isInitialSetup) return "Let's set up your workspace";
  if (stateChecks.isTourActive) return 'Tour';
  if (stateChecks.isComplete) return 'Complete';
  if (stateChecks.isError) return 'Error';
  return 'Onboarding';
}
