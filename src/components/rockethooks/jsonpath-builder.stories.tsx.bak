import type { Meta, StoryObj } from '@storybook/react'
import { useState } from 'react'

import { JSONPathBuilder } from './jsonpath-builder'

/**
 * JSONPathBuilder provides a visual interface for building and testing JSONPath expressions.
 * Features pattern selection, real-time validation, and testing against sample data.
 */
const meta = {
  title: 'RocketHooks/JSONPathBuilder',
  component: JSONPathBuilder,
  parameters: {
    layout: 'padded',
    docs: {
      description: {
        component:
          'Visual interface for building JSONPath expressions with validation, testing, and common pattern shortcuts.',
      },
    },
  },
  argTypes: {
    value: {
      control: { type: 'text' },
      description: 'Current JSONPath expression',
    },
    onChange: { action: 'path changed' },
    onTest: { action: 'test clicked' },
    sampleData: {
      control: { type: 'object' },
      description: 'Sample JSON data for testing paths',
    },
  },
  tags: ['autodocs'],
} satisfies Meta<typeof JSONPathBuilder>

export default meta
type Story = StoryObj<typeof meta>

const sampleUserData = {
  user: {
    id: 123,
    profile: {
      name: 'John Doe',
      email: 'john@example.com',
      settings: {
        notifications: true,
        theme: 'dark',
      },
    },
    roles: ['user', 'moderator'],
    createdAt: '2023-01-15T10:30:00Z',
  },
  posts: [
    {
      id: 1,
      title: 'First Post',
      content: 'Hello world!',
      status: 'published',
      author: 'John Doe',
    },
    {
      id: 2,
      title: 'Second Post',
      content: 'Another post',
      status: 'draft',
      author: 'John Doe',
    },
    {
      id: 3,
      title: 'Third Post',
      content: 'Yet another post',
      status: 'published',
      author: 'Jane Smith',
    },
  ],
  meta: {
    total: 3,
    published: 2,
    drafts: 1,
  },
}

const sampleApiResponse = {
  status: 'success',
  data: {
    orders: [
      {
        id: 'ORD-001',
        customer: {
          name: 'Alice Johnson',
          email: 'alice@example.com',
          address: {
            street: '123 Main St',
            city: 'New York',
            state: 'NY',
            zip: '10001',
          },
        },
        items: [
          { product: 'Laptop', quantity: 1, price: 999.99 },
          { product: 'Mouse', quantity: 2, price: 29.99 },
        ],
        total: 1059.97,
        status: 'completed',
      },
      {
        id: 'ORD-002',
        customer: {
          name: 'Bob Smith',
          email: 'bob@example.com',
          address: {
            street: '456 Oak Ave',
            city: 'Los Angeles',
            state: 'CA',
            zip: '90210',
          },
        },
        items: [{ product: 'Keyboard', quantity: 1, price: 149.99 }],
        total: 149.99,
        status: 'pending',
      },
    ],
    pagination: {
      total: 2,
      page: 1,
      limit: 10,
    },
  },
  timestamp: '2024-01-15T10:30:00Z',
}

/**
 * Basic JSONPath builder with sample user data
 */
export const Default: Story = {
  args: {
    value: '$.user.profile.name',
    sampleData: sampleUserData,
    onChange: () => {},
  },
}

/**
 * Interactive example with state management
 */
export const Interactive: Story = {
  args: {
    placeholder: 'Enter JSONPath expression',
    value: '$.user.profile.name',
    onChange: () => {},
  },
  render: function RenderFunction(args) {
    const [path, setPath] = useState('$.user.profile.name')

    return (
      <JSONPathBuilder
        {...args}
        value={path}
        onChange={setPath}
        sampleData={sampleUserData}
      />
    )
  },
  parameters: {
    controls: { disable: true },
    docs: {
      description: {
        story: 'Fully interactive JSONPath builder that updates in real-time',
      },
    },
  },
}

/**
 * Builder focused on array operations
 */
export const ArrayOperations: Story = {
  args: {
    placeholder: 'e.g., $.posts[*].title',
    value: '$.posts[0].title',
    onChange: () => {},
  },
  render: function RenderFunction(args) {
    const [path, setPath] = useState('$.posts[0].title')

    return (
      <JSONPathBuilder
        {...args}
        value={path}
        onChange={setPath}
        sampleData={sampleUserData}
      />
    )
  },
  parameters: {
    controls: { disable: true },
    docs: {
      description: {
        story: 'Example showing array access patterns with posts data',
      },
    },
  },
}

/**
 * Builder with complex API response data
 */
export const ComplexData: Story = {
  render: function RenderFunction(args) {
    const [path, setPath] = useState('$.data.orders[0].customer.name')

    return (
      <JSONPathBuilder
        {...args}
        value={path}
        onChange={setPath}
        sampleData={sampleApiResponse}
      />
    )
  },
  parameters: {
    controls: { disable: true },
    docs: {
      description: {
        story: 'Working with complex nested API response data',
      },
    },
  },
}

/**
 * Builder with invalid path to show error state
 */
export const InvalidPath: Story = {
  render: function RenderFunction(args) {
    const [path, setPath] = useState('$.invalid..path[')

    return (
      <JSONPathBuilder
        {...args}
        value={path}
        onChange={setPath}
        sampleData={sampleUserData}
      />
    )
  },
  parameters: {
    controls: { disable: true },
    docs: {
      description: {
        story:
          'Demonstration of validation and error handling for invalid paths',
      },
    },
  },
}

/**
 * Builder without sample data
 */
export const NoSampleData: Story = {
  render: function RenderFunction(args) {
    const [path, setPath] = useState('$.property')

    return (
      <JSONPathBuilder
        {...args}
        value={path}
        onChange={setPath}
        sampleData={undefined}
      />
    )
  },
  parameters: {
    controls: { disable: true },
    docs: {
      description: {
        story: 'JSONPath builder without sample data for testing',
      },
    },
  },
}

/**
 * Builder demonstrating array filtering
 */
export const ArrayFiltering: Story = {
  render: function RenderFunction(args) {
    const [path, setPath] = useState('$.posts[?(@.status == "published")]')

    return (
      <JSONPathBuilder
        {...args}
        value={path}
        onChange={setPath}
        sampleData={sampleUserData}
      />
    )
  },
  parameters: {
    controls: { disable: true },
    docs: {
      description: {
        story: 'Example of array filtering using JSONPath expressions',
      },
    },
  },
}

/**
 * Root-level access pattern
 */
export const RootAccess: Story = {
  render: function RenderFunction(args) {
    const [path, setPath] = useState('$')

    return (
      <JSONPathBuilder
        {...args}
        value={path}
        onChange={setPath}
        sampleData={sampleUserData}
      />
    )
  },
  parameters: {
    controls: { disable: true },
    docs: {
      description: {
        story: 'Accessing the root object with $ path',
      },
    },
  },
}

/**
 * Array wildcard access
 */
export const ArrayWildcard: Story = {
  render: function RenderFunction(args) {
    const [path, setPath] = useState('$.posts[*].title')

    return (
      <JSONPathBuilder
        {...args}
        value={path}
        onChange={setPath}
        sampleData={sampleUserData}
      />
    )
  },
  parameters: {
    controls: { disable: true },
    docs: {
      description: {
        story: 'Using wildcard selector to access all array items',
      },
    },
  },
}
