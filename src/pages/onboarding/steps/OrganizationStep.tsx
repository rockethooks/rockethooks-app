import { useCallback, useState } from 'react';
import { OrganizationSetup } from '@/components/onboarding/OrganizationSetup';
import { useOnboarding } from '@/store/onboarding/hooks';
import { OrganizationNameGenerator } from '@/store/onboarding/organizationGenerator';
import { loggers } from '@/utils';

const logger = loggers.onboarding;

export interface OrganizationStepProps {
  onComplete?: () => void;
  onNext?: () => void;
}

export function OrganizationStep({
  onComplete,
  onNext,
}: OrganizationStepProps) {
  const { actions, context } = useOnboarding();

  // Local state for generated organization names and loading states
  const [generatedName, setGeneratedName] = useState<string>(
    context.suggestedOrganizationName ?? 'My Workspace'
  );
  const [isGeneratingName, setIsGeneratingName] = useState(false);

  // Handler for regenerating organization name
  const handleRegenerateName = useCallback(() => {
    setIsGeneratingName(true);

    // Simulate async name generation with a small delay for better UX
    setTimeout(() => {
      // Use a placeholder email to generate creative names
      const email = 'user@workspace.com';
      const suggestions = OrganizationNameGenerator.generateSuggestions(email);

      if (suggestions.length > 0) {
        // Filter to get creative suggestions (not default ones)
        const creativeSuggestions = suggestions.filter(
          (s) => s.source !== 'email-domain' && s.confidence !== 'high'
        );

        const pool =
          creativeSuggestions.length > 0 ? creativeSuggestions : suggestions;

        // Pick a random suggestion from the pool
        const randomIndex = Math.floor(Math.random() * pool.length);
        const newName = pool[randomIndex]?.name ?? 'My Workspace';
        setGeneratedName(newName);
        logger.info('Organization name regenerated', {
          newName,
          suggestionsCount: suggestions.length,
        });
      }

      setIsGeneratingName(false);
    }, 500); // Small delay for better UX
  }, []);

  // Organization submit handler
  const handleOrganizationSubmit = useCallback(
    (name: string, usageType: 'solo' | 'team') => {
      // Log the usage type for future customization
      logger.info('Organization setup submitted', {
        name,
        usageType,
        suggestedName: context.suggestedOrganizationName,
      });

      // Call the createOrganization action
      void actions.createOrganization(name);

      // Call completion callbacks for backward compatibility
      onComplete?.();
      onNext?.();
    },
    [actions, context.suggestedOrganizationName, onComplete, onNext]
  );

  return (
    <OrganizationSetup
      defaultName={generatedName}
      onSubmit={handleOrganizationSubmit}
      onRegenerateName={handleRegenerateName}
      isLoading={context.isCreatingOrganization}
      isGeneratingName={isGeneratingName}
      isAutoGenerated={true}
      {...(context.organizationCreationError && {
        error: context.organizationCreationError,
      })}
    />
  );
}
